{"paragraphs":[{"title":"Định nghĩa lớp ràng buộc cơ sở","text":"%pyspark\r\nclass Constraint:\r\n    def __init__(self, variables):\r\n        self.variables = variables # list chứa các biến mà ràng buộc ảnh hưởng đến\r\n\r\n    def __call__(self, *args):pass \r\n    # kiểm tra xem phép gán giá trị cho các biến có thoả mãn ràng buộc hay không\r\n    #Phương thức __call__ phải được ghi đè bởi các lớp con để cài đặt các ràng buộc cụ thể.","user":"anonymous","dateUpdated":"2023-04-05T17:19:29+0700","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1680510192020_-192911744","id":"20230403-152312_1607555050","dateCreated":"2023-04-03T15:23:12+0700","dateStarted":"2023-04-05T17:19:29+0700","dateFinished":"2023-04-05T17:19:29+0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7668"},{"title":"Định nghĩa lớp dùng để đóng gói hàm ràng buộc ","text":"%pyspark\r\nclass FunctionConstraint(Constraint):\r\n\r\n    def __init__(self, func):\r\n        self.func = func # func: Là hàm ràng buộc\r\n\r\n    def __call__(self, *args): \r\n        return self.func(*args)","user":"anonymous","dateUpdated":"2023-04-05T17:19:29+0700","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1680525673029_183990782","id":"20230403-194113_1310616190","dateCreated":"2023-04-03T19:41:13+0700","dateStarted":"2023-04-05T17:19:29+0700","dateFinished":"2023-04-05T17:19:29+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7669"},{"title":"Định nghĩa lớp cha bài toán ràng buộc","text":"%pyspark\nclass ConstraintProblem():\n    def __init__(self):\n        self.var_domains = {} # Dict chứa key là variable và value là các domains tương ứng với mỗi variable\n        self.constraints = []\n        \n    def add_variable(self, variable, domain):\n        if domain is None:\n            self.var_domains[variable] = set()\n        else:\n            self.var_domains[variable] = set(domain)\n\n    def add_variables(self, variables, domain):\n        for var in variables:\n            self.add_variable(var, domain)\n            \n    def add_constraint(self, constraint, variables = None):\n        if not isinstance(constraint, Constraint):\n            if callable(constraint):  # Lệnh callable trong Python dùng để kiểm tra xem một đối tượng có thể được gọi hay không\n                constraint = FunctionConstraint(constraint)\n            else:\n                raise ValueError()\n        self.constraints.append((constraint, variables)) # Thêm một bộ gồm đối tượng hàm ràng buộc và các biến bị ảnh hưởng bởi ràng buộc vào danh sách Constraints\n    ","user":"anonymous","dateUpdated":"2023-04-05T17:20:28+0700","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1680525353654_-2128719513","id":"20230403-193553_611731588","dateCreated":"2023-04-03T19:35:53+0700","dateStarted":"2023-04-05T17:19:29+0700","dateFinished":"2023-04-05T17:19:29+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7670"},{"title":"Định nghĩa lớp bài toán tô màu bản đồ nước úc","text":"%pyspark\nclass AustraliaMapColoringProblem(ConstraintProblem):\n    def __init__(self, colors):\n        ConstraintProblem.__init__(self)\n        self.regions = [\"WA\", \"NT\", \"Q\", \"NSW\", \"V\", \"SA\", \"T\"]\n        self.colors = colors\n        self.add_variables(self.regions, colors)\n        self.add_constraint(self.diff_neighbors_constraint, self.regions)\n\n    def diff_neighbors_constraint(self, WA, NT, Q, NSW, V, SA, T):\n        return SA != WA and SA != NT and SA != Q and SA != NSW and SA != V and WA != NT and NT != Q and Q != NSW and NSW != V\n    \n    ","user":"anonymous","dateUpdated":"2023-04-05T17:19:29+0700","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1680514187932_-1078725801","id":"20230403-162947_360963845","dateCreated":"2023-04-03T16:29:47+0700","dateStarted":"2023-04-05T17:19:29+0700","dateFinished":"2023-04-05T17:19:29+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7671"},{"text":"%pyspark\ncolors = [\"Red\", \"Green\", \"Blue\"]\naustralia_map_coloring_problem = AustraliaMapColoringProblem(colors)","user":"anonymous","dateUpdated":"2023-04-05T17:19:29+0700","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1680515259393_-1014840457","id":"20230403-164739_120675625","dateCreated":"2023-04-03T16:47:39+0700","dateStarted":"2023-04-05T17:19:30+0700","dateFinished":"2023-04-05T17:19:30+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7672"},{"title":"Định nghĩa lớp bài toán lập lịch trình lắp ráp ô tô","text":"%pyspark\nclass CarAssemblySchedulingProblem(ConstraintProblem):\n    def __init__(self, complete_time, jobs_time):\n        ConstraintProblem.__init__(self)\n        self.complete_time = complete_time\n        self.jobs = [\"AxleF\", \"AxleB\", \"WheelRF\", \"WheelLF\", \"WheelRB\", \"WheelLB\", \"NutsRF\", \"CapRF\",\n        \"NutsLF\", \"CapLF\", \"NutsRB\", \"CapRB\", \"NutsLB\", \"CapLB\", \"Inspect\"]\n        self.jobs_time = jobs_time\n        \n        self.add_variables(self.jobs, range(1, complete_time))\n\n        self.add_constraint(self.axle_constraint, (\"AxleF\", \"WheelRF\"))\n        self.add_constraint(self.axle_constraint2, (\"AxleF\", \"WheelLF\"))\n        self.add_constraint(self.axle_constraint3, (\"AxleB\", \"WheelRB\"))\n        self.add_constraint(self.axle_constraint4, (\"AxleB\", \"WheelLB\"))\n        self.add_constraint(self.wheel_constraint, (\"WheelRF\", \"NutsRF\"))\n        self.add_constraint(self.wheel_constraint2, (\"NutsRF\", \"CapRF\"))\n        self.add_constraint(self.wheel_constraint3, (\"WheelLF\", \"NutsLF\"))\n        self.add_constraint(self.wheel_constraint4, (\"NutsLF\", \"CapLF\"))\n        self.add_constraint(self.wheel_constraint5, (\"WheelRB\", \"NutsRB\"))\n        self.add_constraint(self.wheel_constraint6, (\"NutsRB\", \"CapRB\"))\n        self.add_constraint(self.wheel_constraint7, (\"WheelLB\", \"NutsLB\"))\n        self.add_constraint(self.wheel_constraint8, (\"NutsLB\", \"CapLB\"))\n        self.add_constraint(self.disjunctive_constraint, (\"AxleF\", \"AxleB\"))\n        \n        for job in self.jobs[:-1]:\n            self.add_constraint(self.inspect_constraint, (job, \"Inspect\"))\n        \n    def axle_constraint(self, af, wrf):\n        return af + self.jobs_time[af] <= wrf\n\n    def axle_constraint2(self, af, wlf):\n        return af + self.jobs_time[af] <= wlf\n\n    def axle_constraint3(self, ab, wrb):\n        return ab + self.jobs_time[ab] <= wrb\n\n    def axle_constraint4(self, ab, wlb):\n        return ab + self.jobs_time[ab] <= wlb\n\n    def wheel_constraint(self, wrf, nutrf):\n        return wrf + self.jobs_time[wrf] <= nutrf\n\n    def wheel_constraint2(self, nutrf, caprf):\n        return nutrf + self.jobs_time[nutrf] <= caprf\n\n    def wheel_constraint3(self, wlf, nutlf):\n        return wlf + self.jobs_time[wlf] <= nutlf\n\n    def wheel_constraint4(self, nutlf, caplf):\n        return nutlf + self.jobs_time[nutlf] <= caplf\n\n    def wheel_constraint5(self, wrb, nutrb):\n        return wrb + self.jobs_time[wrb] <= nutrb\n\n    def wheel_constraint6(self, nutrb, caprb):\n        return nutrb + self.jobs_time[nutrb] <= caprb\n\n    def wheel_constraint7(self, wlb, nutlb):\n        return wlb + self.jobs_time[wlb] <= nutlb\n\n    def wheel_constraint8(self, nutlb, caplb):\n        return nutlb + self.jobs_time[nutlb] <= caplb\n\n    def disjunctive_constraint(self, af, ab):\n        return af + self.jobs_time[af] <= ab or ab + self.jobs_time[ab] <= af\n\n    def inspect_constraint(self, variable, inspect):\n        return variable + self.jobs_time[variable] <= inspect\n","user":"anonymous","dateUpdated":"2023-04-05T17:19:30+0700","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1680515332914_-1595060261","id":"20230403-164852_1127011539","dateCreated":"2023-04-03T16:48:52+0700","dateStarted":"2023-04-05T17:19:30+0700","dateFinished":"2023-04-05T17:19:30+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7673"},{"text":"%pyspark\ncomplete_time = 30\njobs_time = {\"AxleF\": 10, \"AxleB\": 10, \"WheelRF\": 1, \"WheelLF\": 1, \"WheelRB\": 1, \"WheelLB\": 1,\\\n                    \"NutsRF\": 2, \"CapRF\": 3, \"NutsLF\": 2, \"CapLF\": 3, \"NutsRB\": 2, \"CapRB\": 3, \"NutsLB\": 2, \"CapLB\": 3, \"Inspect\": 3}\ncar_assembly_schedule_problem = CarAssemblySchedulingProblem(complete_time, jobs_time)","user":"anonymous","dateUpdated":"2023-04-05T17:19:30+0700","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1680516063574_-162610006","id":"20230403-170103_763496888","dateCreated":"2023-04-03T17:01:03+0700","dateStarted":"2023-04-05T17:19:30+0700","dateFinished":"2023-04-05T17:19:30+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7674"},{"title":"Định nghĩa lớp bài toán giải mã TWO + TWO = FOUR","text":"%pyspark\nclass TwoTwoFourProblem(ConstraintProblem):\n    def __init__(self):\n        ConstraintProblem.__init__(self)\n        self.add_variables(\"TF\", range(1, 10))\n        self.add_variables(\"WOUR\", range(10))\n        self.add_constraint(self.sum_constraint, \"FTUWRO\")\n        self.add_constraint(self.all_diffirent_constraint, \"FTUWRO\")\n\n    def sum_constraint(self, f, t, u, w, r, o):\n        return 2*(t*100 + w*10 + o) == f*1000 + o*100 + u*10 + r\n        \n    def all_diffirent_constraint(self, values):\n        n = len(values)\n        for i in range(n):\n            for j in range(i+1, n):\n                if values[i] == values[j]:\n                    return False\n        return True","user":"anonymous","dateUpdated":"2023-04-05T17:19:30+0700","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1680516148013_1722352535","id":"20230403-170228_1546651525","dateCreated":"2023-04-03T17:02:28+0700","dateStarted":"2023-04-05T17:19:30+0700","dateFinished":"2023-04-05T17:19:30+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7675","errorMessage":""},{"title":"","text":"%pyspark\ntwo_two_four_problem = TwoTwoFourProblem()","user":"anonymous","dateUpdated":"2023-04-05T17:19:30+0700","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1680516779048_575087059","id":"20230403-171259_121312157","dateCreated":"2023-04-03T17:12:59+0700","dateStarted":"2023-04-05T17:19:30+0700","dateFinished":"2023-04-05T17:19:30+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7676"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2023-04-05T16:34:13+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1680615182387_-1303971689","id":"20230404-203302_178644542","dateCreated":"2023-04-04T20:33:02+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7677"}],"name":"CodeDemoNhom6","id":"2HVNUC251","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}